shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rlang::last_error()
runApp()
datairis <- iris
g <- ggplot(data = datairis, mapping = aes(x = Sepal.Length, Sepal.Width)) +
geom_point() +
transition_manual(datairis$Species)
g
runApp()
runApp()
transition_manual(varaes$frame)
runApp()
ui <- fluidPage(
titlePanel(p("Animation Lab", style = "color:#3474A7")),
sidebarLayout(
sidebarPanel(
fileInput(inputId = "FileName",
label = "Choose File",
multiple = TRUE,
accept= ".csv"),
radioButtons(inputId = "sep",
label = "Separator",
choices = c(Semicolon = ";",
Comma = ",",
Tab = "\t"),
selected = ","),
uiOutput(outputId = "axisx"),
uiOutput(outputId = "axisy"),
uiOutput(outputId = "frame"),
p("Created by", a("Ahmad Husain Abdullah", href = "https://www.linkedin.com/in/ahmadhusainabdullah/"), "."),
img(src = "http://www.gravatar.com/avatar/faa60428b46ecc30beeef02974e49d47?s=64", width = "70px", height = "70px")
),
mainPanel(
navbarPage(title = "Eksplor!",
tabPanel("Plot",
plotOutput(outputId = "plot")),
tabPanel("Data Table",
box(
dataTableOutput(outputId = "fileinput"),
style = 'overflow-x: auto',
width = 12)))
)
)
)
server <- function(input, output) {
dataset <- reactive({
inFile<-input$FileName
if (is.null(inFile))
return(NULL)
data <-  read.csv(inFile$datapath, sep = input$sep, header = TRUE)
})
output$fileinput <- renderDataTable({
inFile<-input$FileName
if (is.null(inFile))
return(NULL)
dataset()
})
choicesnum <- reactive({
inFile<-input$FileName
if (is.null(inFile))
return(NULL)
dplyr::select_if(dataset(), is.numeric)
})
choicesfac <- reactive({
inFile<-input$FileName
if (is.null(inFile))
return(NULL)
dplyr::select_if(dataset(), is.factor)
})
output$axisx <- renderUI(selectInput(inputId = "x",
label = "Choose your axis x",
choices = colnames(choicesnum())))
output$axisy <- renderUI(selectInput(inputId = "y",
label = "Choose your axis y",
choices = colnames(choicesnum())))
output$frame <- renderUI(selectInput(inputId = "frame",
label = "Choose your frame",
choices = colnames(choicesfac())))
variable <- reactive({
inFile<-input$FileName
if (is.null(inFile))
return(NULL)
var<-list(data=dataset(),
x=input$x,
y=input$y,
frame=input$frame
)
})
output$plot <- renderPlot({
varaes<-variable()
if(is.null(varaes))
return(NULL)
g <- ggplot(data = varaes$data, mapping = aes(x = varaes$x, y = varaes$y)) +
geom_point() +
transition_manual(varaes$frame)
g
})
}
shinyApp(ui, server)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(keras)
?use_condaenv
sessionInfo()
tf_config
library(tensorflow)
tf_config()
sess = tf$Session()
tensorflow::tf_config()
install_tensorflow()
source('~/.active-rstudio-document')
shiny::runApp('New folder (2)')
runApp()
runApp('New folder (2)')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('New folder (2)')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggridges")
library(ggridges)
runApp()
runApp()
runApp()
runApp()
runApp('New folder (2)')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('New folder (2)')
runApp('New folder (2)')
runApp('New folder (2)')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(magick)
magick::image_read("file:///H:/Algoritma/NovemberDataChallenge/TutorialTuesday/correlation.jpg")
magick::image_read("H:/Algoritma/NovemberDataChallenge/TutorialTuesday/correlation.jpg")
runApp()
runApp()
runApp()
runApp()
runApp()
## Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("n", "Number of observations", 2, 1000, 500),
plotOutput("plot1"),
plotOutput("plot2"),
plotOutput("plot3")
)
server <- function(input, output, session) {
# A plot of fixed size
output$plot1 <- renderImage({
# A temp file to save the output. It will be deleted after renderImage
# sends it, because deleteFile=TRUE.
outfile <- tempfile(fileext='.png')
# Generate a png
png(outfile, width=400, height=400)
hist(rnorm(input$n))
dev.off()
# Return a list
list(src = outfile,
alt = "This is alternate text")
}, deleteFile = TRUE)
# A dynamically-sized plot
output$plot2 <- renderImage({
# Read plot2's width and height. These are reactive values, so this
# expression will re-run whenever these values change.
width  <- session$clientData$output_plot2_width
height <- session$clientData$output_plot2_height
# A temp file to save the output.
outfile <- tempfile(fileext='.png')
png(outfile, width=width, height=height)
hist(rnorm(input$n))
dev.off()
# Return a list containing the filename
list(src = outfile,
width = width,
height = height,
alt = "This is alternate text")
}, deleteFile = TRUE)
# Send a pre-rendered image, and don't delete the image after sending it
# NOTE: For this example to work, it would require files in a subdirectory
# named images/
output$plot3 <- renderImage({
# When input$n is 1, filename is ./images/image1.jpeg
filename <- normalizePath(file.path('./images',
paste('image', input$n, '.jpeg', sep='')))
# Return a list containing the filename
list(src = filename)
}, deleteFile = FALSE)
}
shinyApp(ui, server)
}
image_read("correlation.jpg")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
img(src = "www/correlation.jpg")
tes <- image_read("www/correlation.jpg")
tes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
varians.image <- switch(input$typeviz,
"Amounts" = list(src = "www/ranking.jpg"),
"Distributions" = list(src = "www/distributions.jpg"),
"Relationships" = list(src = "www/correlation.jpg"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
think <- image_read("www/think.png")
think
think <- image_read("www/think2.png")
think
think <- image_read("www/think.png")
image_flop(think)
library(ggplot2)
library(grid)
qplot(speed, dist, data = cars, geom = c("point", "smooth"))
rasterImage(think, 21, 0, 25, 80)
qplot(speed, dist, data = cars, geom = c("point", "smooth"))
rasterImage(think, 21, 0, 25, 80)
plot(cars)
rasterImage(think, 21, 0, 25, 80)
plot <- qplot(speed, dist, data = cars, geom = c("point", "smooth"))
plot
rasterImage(think, 21, 0, 25, 80)
plot
geom.raster(think, 21, 0, 25, 80)
plot
grid.raster(think, 21, 0, 25, 80)
plot
grid.raster(think)
plot
grid.raster(think, width = 4, height = 4)
plot
grid.raster(think, width = 0.1, height = 0.1)
plot
grid.raster(think, width = 0.5, height = 0.5, x = 20, y = 2)
plot
grid.raster(think, width = 0.5, height = 0.5)
plot
grid.raster(think, width = 0.3, height = 0.3)
plot
grid.raster(think, width = 0.3, height = 0.3, just = "bottom")
plot
grid.raster(think, width = 0.3, height = 0.3, just = "left")
plot
grid.raster(think, width = 0.3, height = 0.3, just = "leftbottom")
plot
grid.raster(think, width = 0.3, height = 0.3, x = 21, y = 0, hjust = 25, vjust = 80)
plot
grid.raster(think, width = 0.3, height = 0.3, x = 21, y = 0)
plot
grid.raster(think, width = 0.3, height = 0.3, x = 1, y = 0)
plot
grid.raster(think, width = 0.3, height = 0.3, x = 0.2, y = 0)
plot
grid.raster(think, width = 0.3, height = 0.3, x = 0.9, y = 0.2)
plot
grid.raster(think, width = 0.3, height = 0.3, x = 0.8, y = 0.2)
plot <- qplot(speed, dist, data = cars, geom = c("point", "smooth"))
plot
grid.raster(image_flop(think), width = 0.3, height = 0.3, x = 0.9, y = 0.2)
plot <- qplot(speed, dist, data = cars, geom = c("point", "smooth"))
plot
grid.raster(image_flop(think), width = 0.3, height = 0.3, x = 0.7, y = 0.2)
plot <- qplot(speed, dist, data = cars, geom = c("point", "smooth"))
plot
grid.raster(image_flop(think), width = 0.3, height = 0.3, x = 0.8, y = 0.2)
runApp()
runApp()
plot <- qplot(speed, dist, data = cars, geom = c("point", "smooth")) %>% theme_minimal()
plot
grid.raster(image_flop(think), width = 0.3, height = 0.3, x = 0.8, y = 0.2)
plot <- qplot(speed, dist, data = cars, geom = c("point", "smooth")) + theme_minimal()
plot
grid.raster(image_flop(think), width = 0.3, height = 0.3, x = 0.8, y = 0.2)
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
co2 <- read.csv("data_input/environment_1970f.csv")
